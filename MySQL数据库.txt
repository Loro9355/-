第二章 SQL基础
  2.1 SQL简介
    SQL是Structure Query Language（结构化查询语言）的缩写，它是使用关系模型的数据库应
    用语言。
  2.2 （My）SQL使用入门
    2.2.1 SQL分类
      - DDL（Data Definition Languages）语句：数据定义语句，这些语句定义了不同的数据
      段、数据库、表、列、索引等数据库对象的定义。常用关键字包括create、drop、alter等。
      - DML（Data Manipulation Language）语句：数据操纵语句，用于添加、删除、更新和
      查询数据库记录，并检查数据完整性。常用的主要包括insert、delete、update和select等。
      - DCL（Data Control Language）语句：数据控制语句，用于控制不同数据段直接的许可和
      访问级别的语句。这些语句定义了数据库、表、字段、用户的访问权限和安全级别。主要的语
      句关键字包括grant、revoke等。
    2.2.2 DDL语句
      DDL语句简单说来，就是对数据库内部的对象进行创建、删除、修改的操作语句。它和DML语句
      的最大区别就是DML只是对表内数据的操作，而不涉及表的定义、结构的修改，更不会设计其它
      对象。
    - 创建数据库
        数据库创建语句：create database 数据库名称 如 create database test
        - 安装好MySQL就已经存在的数据库
            - information_schema：主要存储了系统中的一些数据库对象信息，比如用户表信息、
            列信息、权限信息、字符集信息、分区信息等。
            - cluster：存储了系统的集群信息。
            - mysql：存储了系统的用户权限信息。
        - 选择要操作的数据库
            use dbname
            - 查看数据库中所有的数据表：show tables;
    - 删除数据库
      语法：drop database dbname;
    - 创建表
      基本语法：create table tablename (column_name_1 column_type_1 constraints,
      column_name_2 column_type_2 constraints, ...column_name_n column_type_n 
      constraints);
        - column_name 是列的名字；
        - column_type 是列的数据类型；
        - constraints 是列的约束条件。
        如创建一个名为emp的表：
          create table emp (ename varchar(10),hiredate date,sale decimal(10,2),
          deptno int(2));
        创建完后，查看表的定义：desc tablename；
    - 删除表
      语法：drop table tablename;
    - 修改表
      表结构的更改一般都使用alter table语句
      - 修改表类型，语法：
        alter table tablename modify [column] column_definition 
        [first | after col_name];
        如修改表emp字段定义：
          alter table emp modify ename varchar(20);
      - 增加表字段，语法：
        alter table tablename add [column] column_definition 
        [first | after col_name];
        如表emp上新增加字段age，类型为int（3）：
          alter table emp add column age int(3);
      - 删除表字段，语法：
        alter table tablename drop [column] col_name;
        如将字段age删除掉：
          alter table emp drop column age;
      - 字段改名，语法：
        alter table tablename change [column] old_col_name column_definition 
        [first | after col_name];
        如将age改名为age1，同时修改字段类型为int(4)：
          alter table emp change age age1 int(4);
          * change和modify都可以修改表的定义，不同的是change后面需要写两次列名，不方便。
          但是change的优点是可以修改列名称，modify则不能。
      - 修改字段排列顺序
        前面介绍的字段增加和修改语法（add/change/modify）中，都有一个可选项first|after 
        column_name,这个选项可以用来修改字段在表中的位置，默认add增加的新字段是加在表的
        最后位置，而change/modify默认都不会改变字段的位置。
        * change/first|after column 这些关键字都是属于MySQL在标准SQL上的扩展，在其他数
        据库上不一定适用。
      - 修改表名
        alter table tablename rename [to] new_tablename;
        如将emp改名为emp1，语法：
          alter table emp rename emp1;
    2.2.3 DML语句
      DML操作是指对数据库中表记录的操作，主要包括表记录的插入（insert）、更新（update）、
      删除（delete）和查询（select），是开发人员日常使用最频繁的操作。
      - 插入记录
        表建好以后，就可以往里插入记录了，基本语法：
          insert into tablename(field1,field2,...fieldn) values(value1,value2,...
          valuesn);
        如向表emp1中插入以下记录，ename为zzx1，hiredate为2000-01-01，sal为2000，deptno
        为1，命令：
          insert into emp (ename,hiredate,sal,deptno) values ('zzx1','2000-01-01',
          '2000',1);
        或不指定字段名称：
          insert into emp values ('lisa','2003-02-01','3000',2);
        或含可控字段、非空但是含有默认值的字段、自增字段，可以不用在insert后的字段列表里面
        出现，values后面只写对应字段的value。这些没写的字段可以自动设置为NULL、默认值、自
        增的下一个数字，如：
          insert into emp (ename,sal) values ('dony',1000); 
        在MySQL中，insert可以一次性插入多条记录，语法：
          insert into tablename （field1, field2, ...fieldn)
          values 
          (record1_value1, record1_value2, ...record1_valuen),
          (record2_value1, record2_value2, ...record2_valuen),
          ...
          (recordn_value1, recordn_value2, ...recordn_valuen);
      - 更新记录
        表里的记录值可以通过update命令进行修改，语法：
          update tablename set field1=value1, field2=value2,
          ...fieldn=valuen [where condition]
          如：
            将表emp中ename为"lisa"的薪水（sal）改为4000：
              update emp set sal=4000 where ename='lisa';
        在MySQL中，update命令可以同时更新多个表中数据，语法：
          update t1,t2,...,tn set t1.field1=expr1,...,tn.fieldn=exprn 
          [where condition]
          如同时更新表emp中的字段sal和表dept中的字段deptname：
            update emp a,dept b set a.sal=a.sal*b.deptno,b.deptname=a.ename 
            where a.deptno=b.deptno;
          * 多表更新的语法更多地用在了根据一个表的字段，来动态地更新另一个表的字段。
      - 删除记录
        如果记录不再需要，可以用delete命令进行删除，语法：
          delete from tablename [where condition];
          例如，在emp中将ename为'dony'的记录全部删除，命令：
            delete from emp where ename='dony';
          在MySQL中可以删除多个表的记录，语法：
            delete t1,t2,...,tn from t1,t2,...,tn [where condition];
          如果from后面的表明用别名，则delete后面也要用相应的别名，否则会提示语法错误。
          例如，将表emp和dept中deptno为3的记录同时删除：
            delete a,b from emp a,dept b where a.deptno=b.deptno and a.deptno=3;
            * 不管是单表还是多表，不加where条件将会把表的所有记录删除。
      - 查询记录   
        数据插入到数据库中后，就可以用select命令进行各种各样的查询，使得输出的结果符合用户
        的要求，语法：
          select * from tablename [where condition]; 或 
          select ename,hiredate,sal,deptno from emp;
        - 查询不重复的记录,可以使用distinct关键字来实现：
          select ename,hiredate,sal,deptno from emp;
        - 条件查询：
          用where关键字来实现，限定条件来查询一部分数据。例如，查询所有deptno为1的记录：
            select * from emp where deptno=1；
          除了"="之外，还有>、<、>=、<=、!=等比较运算符；多个条件之间还可以使用or、and
          等逻辑运算符进行多条件联合查询。例如，多字段查询：
            select * from emp where deptno=1 and sal<3000;
        - 排序和限制
          用关键字order by来实现，按照某个字段进行排序后的记录结果集，语法：
            select * from tablename [where condition] [order by field1 [desc|asc], 
            field2 [desc|asc], ...fieldn [desc|asc]];
          其中，desc和asc是排序关键字，desc标识按照字段进行降序排列，asc则表示升序排列，
          不写关键字默认是升序排列。例如，将emp表中的记录按照工资高低进行显示：
            select * from emp order by sal;
          用limit关键字来显示一部分排序后的记录，语法：
            select ... [limit offset_start,row_count];
          其中offset_start表示记录的起始偏移量，row_count表示显示的行数，默认情况下，起始
          偏移量为0，只需要写行数就可以。例如，显示emp表中按照sal排序后的前3条记录：
            select * from emp order by sal limit 3;
            如果从第二条记录开始，显示3条记录：
            select * from emp order by sal limit 1,3;
          limit经常和order by一起配合使用来进行记录的分页显示。
          * limit属于MySQL扩展SQL92后的语法，在其他数据库上并不能使用。
        - 聚合            
          用户进行一些汇总操作，这时需要用到SQL的聚合操作，语法：
            select [field1,field2,...fieldn] fun_name
            from tablename 
            [where where_condition]
             [group by field1,field2,...fieldn 
             [with rollup]]
             [having where_condition];
            参数说明：
              fun_name标识要做的聚合操作，也就是聚合函数，常用的有sum（求和）、count（*）
              （记录数）、max（最大值）、min（最小值）。
              group by 关键字表示要进行分类聚合的字段，将字段写在group by后面。
              with rollup是可选语法，表明是否对分类聚合后的结果进行再汇总。
              having 关键字表示对分类后的结果再进行条件的过滤。
              * having和where的区别在于having是对聚合后的结果进行条件的过滤，而where是
              在聚合前就对记录进行过滤，如果逻辑允许，尽可能用where先过滤记录，这样结果集
              减小，将对聚合的效率大大提高，最后在根据逻辑看是否用having进行再过滤。
          例如，要emp表中统计公司的总人数：
            select count(1) from emp;
          在此基础上，统计各个部门的人数：
            select deptno,count(1) from emp group by deptno;
          既要统计各部门人数，又要统计总人数：
            select deptno,count(1) from emp group by deptno with rollup;
          统计人数大于1人的部门：
            select deptno,count(1) from emp group by deptno having count(1)>1;
          最后统计公司所有员工的薪水总额、最高和最低薪水：
            select sum(sal),max(sal),min(sal) from emp;
        - 表连接    
          当需要同时显示多个表中的字段时，就可以用表连接来实现这样的功能。
          从大类上分，表连接分为内连接和外连接，他们之间最大的区别是内连接仅选出两张表
          中互相匹配的记录，而外连接会选出其它不匹配的记录。
          例如，查询出所有雇员的名字所在部门的名称：
            select ename,deptname from emp,dept where emp.deptno=dept.deptno;
          外连接又分为左连接和右连接，定义：
            - 左连接：包含所有的左边表中的记录甚至是右边表中没有和它匹配的记录。
            - 右连接：包含所有的右边表中的记录甚至是左边表中没有和它匹配的记录。
          例如，查询emp中所有用户和所在部门的名称：
            select ename,deptname from emp left join dept on 
            emp.deptno=dept.deptno;
            或：
            select ename,deptname from dept right join emp on 
            dept.deptno = emp.deptno;
        - 子查询
          在某些情况下，当进行查询的时候，需要的条件是另外一个select语句的结果，这个时候，
          就要用到子查询。用于子查询的关键字主要包括in、not in、=、exists、not exists等。
          例如，从emp表中查询出所有部门在dept表中的所有记录：
            select * from emp where deptno in (select deptno from dept);
          *子查询和表连接之间的转换主要应用在两个方面：
            - MySQL4.1以前的版本不支持子查询，需要用表连接实现子查询的功能。
            - 表连接在很多情况下用于优化子查询。
        - 记录联合
          把两个表的数据按照一定的查询条件查询出来后，将结果合并到一起显示出来，这个时候，
          就需要union和union all关键字来实现这样的功能，语法：
            select * from t1
            union|union all 
            select * from t2 
            ...
            unoin|union all 
            select * from tn;
          union和union all的主要区别是，union all把结果集直接合并在一起，而union是将
          union all后的结果进行一次distinct，取出重复后的结果。
    2.2.4 DCL语句
      DCL语句主要是DBA用来管理系统中的对象权限时使用。
  2.3 帮助的使用
    2.3.1 按照层次看帮助
      - 可以用"? contents"命令来显示所有可供查询的分类；
      - 可以使用"? 类别名称"的方式针对用户感兴趣的内容做进一步的查看；
        例如：查看MySQL中支持的数据类型，可以用"? data types"命令：
    2.3.2 快速查阅帮助
      如果需要快速查阅某项语法时，可以使用关键字进行快速查阅。
      - 例如，查看show命令的功能："? show";
      - 查看create table的语法："? create table"。
3 MySQL支持的数据类型 
  3.1 数值类型
    