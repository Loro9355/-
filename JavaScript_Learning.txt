1 JavaScript 
  1.2 JavaScript 实现
      一个完整的JavaScript实现应该由下列三个部分组成：
        - 核心（ECMAScript）
        - 文档对象模型（DOM）
        - 浏览器对象模型（BOM）
3 基本概念
  3.4 数据类型
      ECMAScript中由5中简单数据类型（也称为简单数据类型）：Undefined、Null、Boolean、number
    和String。还有一种复杂数据类型——Object，Object本质上是由一组无序的名值对组成的。ECMAScript
    不支持任何创建自定义类型的机制，而所有值最终都将是上述6种数据类型之一。
    3.4.1 typeof 操作符
        鉴于ECMAScript是松散类型的，因此需要有一种手段来检测给定变量的数据类型——typeof，typeof
      就是负责提供这方面信息的操作符。
        - "undefined" —— 如果这个值未定义；
        - "boolean" —— 如果这个值是布尔值；
        - "string" —— 如果这个值是字符串；
        - "number" —— 如果这个值是数值；
        - "object" —— 如果这个值是对象或null；
        - "function" —— 如果这个值是函数。
        例如：
        - var message = "some string";
        - alter(typeof message);            // "string"
        - alter(typeof (message));          // "string"
        alter(typeof 95);                   // "number"
        这几个例子说明，typeof操作符的操作数可以使变量（message），也可以是数值字面量。注意，
      typeof是一个操作符而不是函数，因此typeof后的内容尽管可以使用，但不是必需的。
    3.4.2 undefined 类型    
        undefined类型只有一个值，即特殊的undefined。在使用var声明变量但未对其加以初始化时，
      这个变量的值就是undefined，例如：
          var message;
          alert(message == undefined);  // true
        等价于：
          var message = undefined;
          alert(message == undefined);  // true    
        不过，包含undefined值的变量与尚未定义的变量还是不一样的。例如：
          var message;
          var age;

          alert(message);  // undefined
          alert(age);      // 产生错误
        运行以上代码，第一个警告会显示message的值，即"undefined"。而第二个警告框 —— 
      由于传递给alert()函数的是尚未声明的变量age —— 则会导致一个错误。对于尚未声明过
      的变量，只能执行一项操作，即使用typeof操作符检测其数据类型（但是并没有什么实际意
      义，而且在严格模式下确实会导致错误）。  
        * 即便是未初始化的变量会自动被赋予undefined值，但显式地初始化变量依然是明智的
          选择。如果做到这一点，那么当typeof操作符返回"undefined"值时，就知道被检测
          的变量还没有被声明，而不是尚未初始化。
    3.4.3 null 类型
        null类型是第二个只有一个值的数据类型，这个特殊的值是null。从逻辑角度来看，null
      值表示一个空对象指针，而这也正是使用typeof操作符检测null值时会返回"object"的原
      因，例如：
        var car = null;
        alert(typeof car);  // "object"
        
